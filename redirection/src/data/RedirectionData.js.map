{"version":3,"file":"RedirectionData.js","sourceRoot":"","sources":["../src/data/RedirectionData.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,YAAY,EAAwB,MAAM,oBAAoB,CAAC;AAExE,MAAM,CAAN,IAAY,SAEX;AAFD,WAAY,SAAS;IACjB,mDAAsC,CAAA;AAC1C,CAAC,EAFW,SAAS,KAAT,SAAS,QAEpB;AAED,MAAM,MAAM,GAAG,YAAY,CAAC,cAAc,CAAC,EAAE,CAAC;AAC9C,MAAM,cAAc,GAAyB,EAE5C,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAA2B,MAAM,CAAC,MAAM,CAAC;IAC1E,cAAc,EAAE,aAAa;IAC7B,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,EAAE;IACT,OAAO,EAAE,6GAA6G;CACzH,CAAC,CAAC;AAEH,MAAM,CAAC,OAAO,OAAO,eAAe;IAChC,YAAoB,QAAsB,EAAU,cAAsB;QAAtD,aAAQ,GAAR,QAAQ,CAAc;QAAU,mBAAc,GAAd,cAAc,CAAQ;IAE1E,CAAC;IAEY,WAAW;;YACpB,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,mBAAmB,EAAE,0BAA0B,CAAC;YACpE,MAAM,MAAM,GAA2B,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC7D,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;YAC5B,MAAM,MAAM,GAA2B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;YACpF,MAAM,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC;YACrB,IAAI;gBACA,uCACO,wBAAwB,GACxB,MAAM,EACX;aACL;YAAC,OAAM,GAAG,EAAE;gBACT,yBACO,wBAAwB,EAC7B;aACL;QACL,CAAC;KAAA;IAEM,YAAY,CAAC,MAA8B;QAC9C,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,mBAAmB,EAAE,IAAI,MAAM,CAAC,EAAE,GAAG,CAAC;QAC1D,MAAM,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QACzC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAChC,CAAC;IAEO,eAAe,CAAC,MAA8B;QAClD,MAAM,KAAK,qBACJ,MAAM,CACZ,CAAC;QACF,OAAO,KAAK,CAAC,EAAE,CAAC;QAEhB,MAAM,GAAG,GAAG,EAAE,CAAC;QACf,2BAA2B;QAE3B,GAAG,CAAC,4BAA4B,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC1D,OAAO,GAAG,CAAC;IACf,CAAC;IACL;;;;;YAKQ;IAEI,UAAU;QACd,yBACO,cAAc,EACpB;IACL,CAAC;IAEO,mBAAmB;QACvB,OAAO;YACH,IAAI,CAAC,cAAc;YACnB,8BAA8B,SAAS,CAAC,QAAQ,UAAU;SAC7D,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAChB,CAAC;IAEa,KAAK,CAAC,GAAG,EAAE,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE;;YAChD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;YACjE,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACrC,OAAO,MAAM,CAAC,KAAK,CAAC;QACxB,CAAC;KAAA;IAEa,KAAK,CAAC,GAAG,EAAE,IAAS,EAAE,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE;;YAC3D,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;YACzB,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACpC,OAAO,CAAC,OAAO,GAAG;gBACd,eAAe,EAAE,OAAO;gBACxB,UAAU,EAAE,GAAG;aAClB,CAAC;YACF,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QACnD,CAAC;KAAA;CACJ;AAED,SAAS,KAAK,CAAI,KAAU;IACxB,IAAG,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;QACxB,OAAO,IAAI,CAAC;KACf;IACD,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC","sourcesContent":["import { SPHttpClient, ISPHttpClientOptions } from '@microsoft/sp-http';\r\n\r\nexport enum ListTitle {\r\n    Settings = \"Site Redirection Settings\",\r\n}\r\n\r\nconst Config = SPHttpClient.configurations.v1;\r\nconst DefaultOptions: ISPHttpClientOptions = {\r\n    \r\n};\r\n\r\nexport const DefaultRedirectionConfig: ISiteRedirectionConfig = Object.freeze({\r\n    DestinationUrl: \"https://...\",\r\n    Enabled: false,\r\n    Delay: 10,\r\n    Message: \"This site has moved. You will be redirected to the new location soon. Please update your browser bookmarks.\"\r\n});\r\n\r\nexport default class RedirectionData {\r\n    constructor(private spClient: SPHttpClient, private absoluteWebUrl: string) {\r\n\r\n    }\r\n\r\n    public async fetchConfig(): Promise<ISiteRedirectionConfig> {\r\n        const url = `${this.getListItemsApiPath()}?$top=1&$orderby=ID desc`;\r\n        const result = <ISiteRedirectionRow[]> await this.fetch(url);\r\n        const match = first(result);\r\n        const config = <ISiteRedirectionConfig>JSON.parse(match.SiteRedirectionPreferences);\r\n        config.Id = match.Id;\r\n        try {\r\n            return {\r\n                ...DefaultRedirectionConfig,\r\n                ...config,\r\n            };\r\n        } catch(err) {\r\n            return {\r\n                ...DefaultRedirectionConfig,\r\n            };\r\n        }\r\n    }\r\n\r\n    public updateConfig(config: ISiteRedirectionConfig): Promise<any> {\r\n        const url = `${this.getListItemsApiPath()}(${config.Id})`;\r\n        const row = this.transformConfig(config);\r\n        return this.merge(url, row);\r\n    }\r\n\r\n    private transformConfig(config: ISiteRedirectionConfig): ISiteRedirectionRow {\r\n        const clean = {\r\n            ...config,\r\n        };\r\n        delete clean.Id;\r\n\r\n        const row = {};\r\n        //this.appendMetadata(row);\r\n\r\n        row['SiteRedirectionPreferences'] = JSON.stringify(clean);\r\n        return row;\r\n    }\r\n/* \r\n    private appendMetadata(data: Object) {\r\n        data['__metadata'] = {\r\n            \"type\": \"SP.Data.SiteRedirectionListItem\"\r\n        };\r\n    } */\r\n\r\n    private getOptions(): ISPHttpClientOptions {\r\n        return {\r\n            ...DefaultOptions,\r\n        }\r\n    }\r\n\r\n    private getListItemsApiPath(): string {\r\n        return [\r\n            this.absoluteWebUrl, \r\n            `_api/web/lists/getByTitle('${ListTitle.Settings}')/items`\r\n        ].join('/');\r\n    }\r\n\r\n    private async fetch(url, options = this.getOptions()): Promise<unknown> {\r\n        const response = await this.spClient.fetch(url, Config, options);\r\n        const result = await response.json();\r\n        return result.value;\r\n    }\r\n\r\n    private async merge(url, body: any, options = this.getOptions()): Promise<void> {\r\n        options.method = \"MERGE\";\r\n        options.body = JSON.stringify(body);\r\n        options.headers = {\r\n            'X-HTTP-Method': 'MERGE',\r\n            'IF-MATCH': '*'\r\n        };\r\n        await this.spClient.post(url, Config, options);\r\n    }\r\n}\r\n\r\nfunction first<T>(items: T[]): T {\r\n    if(!items || !items.length) {\r\n        return null;\r\n    }\r\n    return items[0];\r\n}\r\n\r\nexport interface ISiteRedirectionRow {\r\n    Id?: number;\r\n    Title?: string;\r\n    SiteRedirectionPreferences?: string;\r\n}\r\n\r\nexport interface ISiteRedirectionConfig {\r\n\r\n    /**\r\n     * If true, Redirection will display banner, otherwise it will remain minimized\r\n     */\r\n    Enabled: boolean;\r\n\r\n    /**\r\n     * Seconds before redirection action is triggered\r\n     */\r\n    Delay: number;\r\n\r\n    /**\r\n     * Mark up of message on banner displayed before redirection\r\n     */\r\n    Message: string;\r\n\r\n    /**\r\n     * Location to redirect to\r\n     */\r\n    DestinationUrl: string;\r\n\r\n    /**\r\n     * SharePoint List Item ID\r\n     */\r\n    Id?: number;\r\n\r\n}"]}