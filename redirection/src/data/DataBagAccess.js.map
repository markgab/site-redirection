{"version":3,"file":"DataBagAccess.js","sourceRoot":"","sources":["../src/data/DataBagAccess.ts"],"names":[],"mappings":"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","sourcesContent":["import { SPComponentLoader } from '@microsoft/sp-loader';\r\n\r\nconst ConfigKey = \"SiteRedirectionConfig\";\r\nconst DefaultConfig: ISiteRedirectionConfig = Object.freeze({\r\n    enabled: false,\r\n    delay: 5,\r\n    message: `\r\n        <p>This site has moved to a new location, please update your browser bookmark.</p>\r\n        <p>You will be automatically redirected soon.</p>\r\n        `,\r\n    destinationUrl: '',\r\n});\r\n\r\nexport default class DataBagAccess {\r\n    constructor(protected siteUrl?: string) {\r\n\r\n    }\r\n\r\n    protected createContext(): SP.ClientContext {\r\n        return new SP.ClientContext(this.siteUrl ? this.siteUrl : undefined);\r\n    }\r\n\r\n    fetchConfig(): Promise<ISiteRedirectionConfig> {\r\n        return new Promise<ISiteRedirectionConfig>((resolve, reject) => {\r\n\r\n            const context = this.createContext();\r\n\r\n            const webProperties = context.get_web().get_allProperties();\r\n\r\n            context.load(webProperties);\r\n            context.executeQueryAsync(\r\n                getWebPropertiesSucceeded, \r\n                (s, a) => reject(a)\r\n            );\r\n            \r\n            function getWebPropertiesSucceeded() {\r\n\r\n                try {\r\n\r\n                    const strConfig: string = webProperties.get_fieldValues()[ConfigKey]  || '{}'; \r\n\r\n                    const config = {\r\n                        ...DefaultConfig,\r\n                        ...JSON.parse(strConfig),\r\n                    } as ISiteRedirectionConfig;\r\n\r\n                    resolve(config);\r\n                    \r\n                } catch(err) {\r\n                    console.warn('Site redirection failed to restore saved configuration. Using default.');\r\n                    return DefaultConfig;\r\n                }\r\n            }\r\n\r\n        }).catch(this.handleJsomError);\r\n    }\r\n\r\n    saveConfig(config: ISiteRedirectionConfig): Promise<unknown> {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            // You can optionally specify the Site URL here to get the context\r\n            // If you don't specify the URL, the method will get the context of the current site\r\n            // var clientContext = new SP.ClientContext(\"http://MyServer/sites/SiteCollection\");\r\n            //var clientContext = new SP.ClientContext();\r\n            \r\n            const strConfig = JSON.stringify(config);\r\n            const context = this.createContext();\r\n            const oWebsite = context.get_web();\r\n            context.load(oWebsite);\r\n            const props = oWebsite.get_allProperties();\r\n            props.set_item(ConfigKey, strConfig);\r\n            oWebsite.update();\r\n            context.load(oWebsite);\r\n\r\n            // Execute the query to the server.\r\n            context.executeQueryAsync(\r\n                () => resolve(null),\r\n                (s, a) => reject(a)\r\n            );\r\n            \r\n        }).catch(this.handleJsomError);\r\n    }\r\n\r\n    protected handleJsomError = (args: SP.ClientRequestFailedEventArgs) => {\r\n        const msg = `Data Transaction Failed!\\n'${args.get_message()}\\n${args.get_stackTrace()}`; \r\n        throw new Error(msg);\r\n    }\r\n\r\n    static loadScripts(): Promise<any> {\r\n        return SPComponentLoader.loadScript('/_layouts/15/init.js', {\r\n            globalExportsName: '$_global_init'\r\n        })\r\n        .then((): Promise<{}> => {\r\n            return SPComponentLoader.loadScript('/_layouts/15/MicrosoftAjax.js', {\r\n                globalExportsName: 'Sys'\r\n            });\r\n        })\r\n        .then((): Promise<{}> => {\r\n            return SPComponentLoader.loadScript('/_layouts/15/SP.Runtime.js', {\r\n                globalExportsName: 'SP'\r\n            });\r\n        })\r\n        .then((): Promise<{}> => {\r\n            return SPComponentLoader.loadScript('/_layouts/15/SP.js', {\r\n                globalExportsName: 'SP'\r\n            });\r\n        });\r\n    }\r\n}\r\n\r\nexport interface ISiteRedirectionConfig {\r\n\r\n    /**\r\n     * If true, Redirection will display banner, otherwise it will remain minimized\r\n     */\r\n    enabled: boolean;\r\n\r\n    /**\r\n     * Seconds before redirection action is triggered\r\n     */\r\n    delay: number;\r\n\r\n    /**\r\n     * Mark up of message on banner displayed before redirection\r\n     */\r\n    message: string;\r\n\r\n    /**\r\n     * Location to redirect to\r\n     */\r\n    destinationUrl: string;\r\n}"]}