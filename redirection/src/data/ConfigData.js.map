{"version":3,"file":"ConfigData.js","sourceRoot":"","sources":["../src/data/ConfigData.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AACpC,OAAO,EAAkB,GAAG,EAAE,MAAM,cAAc,CAAC;AAEnD,OAAO,cAAc,CAAC;AACtB,OAAO,eAAe,CAAC;AACvB,OAAO,eAAe,CAAC;AAqCvB,MAAM,CAAC,MAAM,wBAAwB,GAA2B,MAAM,CAAC,MAAM,CAAC;IAC1E,cAAc,EAAE,aAAa;IAC7B,OAAO,EAAE,KAAK;IACd,KAAK,EAAE,EAAE;IACT,OAAO,EAAE,6GAA6G;CACzH,CAAC,CAAC;AAEH,MAAM,CAAN,IAAY,SAEX;AAFD,WAAY,SAAS;IACjB,mDAAsC,CAAA;AAC1C,CAAC,EAFW,SAAS,KAAT,SAAS,QAEpB;AAED,MAAM,CAAC,OAAO,OAAO,UAAU;IAC3B,YAAmB,cAAsB;QAAtB,mBAAc,GAAd,cAAc,CAAQ;QACrC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,EAAC,OAAO,EAAE,cAAc,EAAC,CAAC,CAAC,CAAC;IAC/E,CAAC;IAID,IAAY,UAAU;QAClB,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACzD,CAAC;IAEY,WAAW;;YAEpB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,UAAU;iBAC9B,KAAK;iBACL,GAAG,CAAC,CAAC,CAAC;iBACN,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC;YAE5B,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;YAC3B,MAAM,MAAM,GAA2B,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;YACpF,MAAM,CAAC,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC;YACrB,IAAI;gBACA,uCACO,wBAAwB,GACxB,MAAM,EACX;aACL;YAAC,OAAM,GAAG,EAAE;gBACT,yBACO,wBAAwB,EAC7B;aACL;QAEL,CAAC;KAAA;IAEM,YAAY,CAAC,MAA8B;QAC9C,MAAM,GAAG,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QAEzC,OAAO,IAAI;aACN,UAAU;aACV,KAAK;aACL,OAAO,CAAC,MAAM,CAAC,EAAY,CAAC;aAC5B,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAE1B,CAAC;IAEO,eAAe,CAAC,MAA8B;QAClD,MAAM,KAAK,qBACJ,MAAM,CACZ,CAAC;QACF,OAAO,KAAK,CAAC,EAAE,CAAC;QAEhB,MAAM,GAAG,GAAG,EAAE,CAAC;QACf,2BAA2B;QAE3B,GAAG,CAAC,4BAA4B,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC1D,OAAO,GAAG,CAAC;IACf,CAAC;CACJ;AAED,SAAS,KAAK,CAAI,KAAU;IACxB,IAAG,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;QACxB,OAAO,IAAW,CAAC;KACtB;IACD,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;AACpB,CAAC","sourcesContent":["import { SPBrowser } from \"@pnp/sp\";\r\nimport { IWeb, IWebInfo, Web } from \"@pnp/sp/webs\";\r\nimport { IList } from \"@pnp/sp/lists\";\r\nimport \"@pnp/sp/webs\";\r\nimport \"@pnp/sp/lists\";\r\nimport \"@pnp/sp/items\";\r\n\r\nexport interface ISiteRedirectionRow {\r\n    Id?: number;\r\n    Title?: string;\r\n    SiteRedirectionPreferences?: string;\r\n}\r\n\r\nexport interface ISiteRedirectionConfig {\r\n\r\n    /**\r\n     * If true, Redirection will display banner, otherwise it will remain minimized\r\n     */\r\n    Enabled: boolean;\r\n\r\n    /**\r\n     * Seconds before redirection action is triggered\r\n     */\r\n    Delay: number;\r\n\r\n    /**\r\n     * Mark up of message on banner displayed before redirection\r\n     */\r\n    Message: string;\r\n\r\n    /**\r\n     * Location to redirect to\r\n     */\r\n    DestinationUrl: string;\r\n\r\n    /**\r\n     * SharePoint List Item ID\r\n     */\r\n    Id?: number;\r\n\r\n}\r\n\r\nexport const DefaultRedirectionConfig: ISiteRedirectionConfig = Object.freeze({\r\n    DestinationUrl: \"https://...\",\r\n    Enabled: false,\r\n    Delay: 10,\r\n    Message: \"This site has moved. You will be redirected to the new location soon. Please update your browser bookmarks.\"\r\n});\r\n\r\nexport enum ListTitle {\r\n    Settings = \"Site Redirection Settings\",\r\n}\r\n\r\nexport default class ConfigData {\r\n    constructor(public absoluteWebUrl: string) {\r\n        this.web = Web(absoluteWebUrl).using(SPBrowser({baseUrl: absoluteWebUrl}));\r\n    }\r\n\r\n    private web: IWeb;\r\n\r\n    private get configList(): IList {\r\n        return this.web.lists.getByTitle(ListTitle.Settings);\r\n    }\r\n    \r\n    public async fetchConfig(): Promise<ISiteRedirectionConfig> {\r\n\r\n        const items = await this.configList\r\n            .items \r\n            .top(1)\r\n            .orderBy('Id', false)();\r\n\r\n        const match = first(items);\r\n        const config = <ISiteRedirectionConfig>JSON.parse(match.SiteRedirectionPreferences);\r\n        config.Id = match.Id;\r\n        try {\r\n            return {\r\n                ...DefaultRedirectionConfig,\r\n                ...config,\r\n            };\r\n        } catch(err) {\r\n            return {\r\n                ...DefaultRedirectionConfig,\r\n            };\r\n        }\r\n        \r\n    }\r\n\r\n    public updateConfig(config: ISiteRedirectionConfig): Promise<any> {\r\n        const row = this.transformConfig(config);\r\n\r\n        return this\r\n            .configList\r\n            .items\r\n            .getById(config.Id as number)\r\n            .update(row, '*');\r\n\r\n    }\r\n\r\n    private transformConfig(config: ISiteRedirectionConfig): ISiteRedirectionRow {\r\n        const clean = {\r\n            ...config,\r\n        };\r\n        delete clean.Id;\r\n\r\n        const row = {};\r\n        //this.appendMetadata(row);\r\n\r\n        row['SiteRedirectionPreferences'] = JSON.stringify(clean);\r\n        return row;\r\n    }\r\n}\r\n\r\nfunction first<T>(items: T[]): T {\r\n    if(!items || !items.length) {\r\n        return null as any;\r\n    }\r\n    return items[0];\r\n}\r\n"]}